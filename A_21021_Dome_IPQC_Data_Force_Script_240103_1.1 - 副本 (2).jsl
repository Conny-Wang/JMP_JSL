//!
//更新日期 2024/01/03


NW = Expr(

	New Window( "21021 Dome IPQC Force", //窗体名称
		Outline Box( "21021A Dome Force", //分级菜单栏名称
			V List Box( //垂直排列显示框
				H List Box( Text Box( "测试日期	:    " ), Test_Date_BoxA = Text Edit Box( "D", <<Set Width( 100 ) ) ), //A Dome 测试日期
				H List Box( Text Box( "测试时间	:    " ), Test_Time_BoxA = Text Edit Box( "T", <<Set Width( 100 ) ) ),   //A Dome 测试时间
				H List Box( Text Box( "机台编号	:    " ), Machine_BoxA = Text Edit Box( "", <<Set Width( 100 ) ) ),   //A Dome 机台编号
				H List Box( Text Box( "模具编号	:    " ), Tool_BoxA = Text Edit Box( "21021A", <<Set Width( 100 ) ) )    //Tool 型号 大 Dome
			), 
			
			Spacer Box( size( 10, 10 ) ), //保持和其他显示框的间距
			
			//点击按钮可以运行对应的脚本
			Button Box( "生成 A Dome Force 报表", Import_SE_Data_ADome ), 
			//Button Box( "重新生成 A Dome Force 图形",A_Dome ),
			Button Box( "保存 A Dome Force 报表",Save_A_Dome_Force ),
			
		), 
		
		Spacer Box( size( 10, 10 ) ), //保持和其他显示框的间距
		
		Outline Box( "21021B Dome Force", //分级菜单栏名称
			V List Box( //垂直排列显示框
				H List Box( Text Box( "测试日期	:    " ), Test_Date_BoxB = Text Edit Box( "D", <<Set Width( 100 ) ) ), //B Dome 测试日期
				H List Box( Text Box( "测试时间	:    " ), Test_Time_BoxB = Text Edit Box( "T", <<Set Width( 100 ) ) ),   //B Dome 测试时间
				H List Box( Text Box( "机台编号	:    " ), Machine_BoxB = Text Edit Box( "", <<Set Width( 100 ) ) ),   //B Dome 机台编号
				H List Box( Text Box( "模具编号	:    " ), Tool_BoxB = Text Edit Box( "21021B", <<Set Width( 100 ) ) )    //Tool 型号 小 Dome
				
			), 	
			
			Spacer Box( size( 10, 10 ) ), //保持和其他显示框的间距
			
			//点击按钮可以运行对应的脚本
			Button Box( "生成 B Dome Force 报表", Import_SE_Data_BDome ), 
			//Button Box( "重新生成 B Dome Force 图形",B_Dome ),
			Button Box( "保存 B Dome Force 报表",Save_B_Dome_Force ),
		
		), 

	)
);

//设置窗体大小 移动窗体位置
NW << Set Window Size( 260, 600 ) << Move window( 1600, 100 );

 //==================================================
 
//大 Dome 生成报表
//导入 A Dome SE 数据
Import_SE_Data_ADome  =  Expr(
	
// A Dome 测试日期
Test_DateA = Test_Date_BoxA << Get Text();
// A Dome 测试时间
Test_TimeA = Test_Time_BoxA << Get Text();
// A Dome 机台编号
Machine_A = Machine_BoxA << Get Text();
//A Dome 模号
Tool_A = Tool_BoxA << Get Text();

preferences(set(excel open method("open all sheets")));
//判断桌面是否有  21021_IPQC_Data  文件
IPQC_Data_Dir = Is Directory("$Desktop\21021_IPQC_Data_source");
//如果没有就创建一个 21021_IPQC_Data  文件夹
if (IPQC_Data_Dir  == 0,
Create Directory("$Desktop\21021_IPQC_Data_source" ));
//设置桌面 JMP 文件夹为默认目录
path = Set Default Directory("$Desktop\21021_IPQC_Data_source");

	dt = Multiple File Import(
			<<Set Folder( path ),
			<<Set Name Filter( "*.xls; " ),
			<<Set Name Enable( 1 ),
			<<Set Size Filter( {2732, 493122521} ),
			<<Set Size Enable( 0 ),
			<<Set Date Filter( {3678190842.473, 3678190842.651} ),
			<<Set Date Enable( 0 ),
			<<Set Add File Name Column( 0 ),
			<<Set Add File Size Column( 0 ),
			<<Set Add File Date Column( 0 ),
			<<Set Import Mode( "CSVData" ),
			<<Set Charset( "最佳推测" ),
			<<Set Stack Mode( "Stack Similar" ),
			<<Set CSV Has Headers( 0 ),
			<<Set CSV Allow Numeric( 1 ),
			<<Set CSV First Header Line( 1 ),
			<<Set CSV Number Of Header Lines( 1 ),
			<<Set CSV First Data Line( 2 ),
			<<Set CSV EOF Comma( 1 ),
			<<Set CSV EOF Tab( 0 ),
			<<Set CSV EOF Space( 0 ),
			<<Set CSV EOF Spaces( 0 ),
			<<Set CSV EOF Other( "" ),
			<<Set CSV EOL CRLF( 1 ),
			<<Set CSV EOL CR( 1 ),
			<<Set CSV EOL LF( 1 ),
			<<Set CSV EOL Semicolon( 0 ),
			<<Set CSV EOL Other( "" ),
			<<Set CSV Quote( "\!"" ),
			<<Set CSV Escape( "" )
		) << Import Data;
	dt << Set name("21021 IPQC Dome Force Data");
//导入后定义当前活动表为 datatable
dt = Current Data Table();
//判断有没有活动表,如果没有停止运行
if (
	Is Empty(dt),
	win = New Window( "错误提示",
    <<Modal,
    Text Box( "桌面  21021_IPQC_Data_source 文件夹\!n为空请检查文件！" ),
    Button Box( "OK" ),);
	Stop();
);

//判断打开的表是否有多个
If( N Table() > 1, win = New Window( "错误提示",
    <<Modal,
    Text Box( "当前有打开的 JMP 数据表\!n请全部关闭后再运行！" ),
    Button Box( "OK" ),);
	Stop(););

	dt = data table("21021 IPQC Dome Force Data.jmp");
		current data table(dt);
		column(1) << set name("Number");
		column(4) << set name("PF_");
		column(5) << set name("PT_");
		column(6) << set name("BF_");
		column(7) << set name("BT_");
		column(8) << set name("RPF_");
		column(9) << set name("RPT_");
		column(10) << set name("RBF_");
		column(11) << set name("RBT_");
		column(12) << set name("Clickg_");
		column(13) << set name("Click_");
		column(14) << set name("Max_");
		column(15) << set name("TT_");

		dt << select where(:Number == ""|contains(:Number,"Product Name")|contains(:Number,"Lot No")|
						contains(:Number,"Operator")|contains(:Number,"Upper")|
						contains(:Number,"Lower")|contains(:Number,"Maxi")|
						contains(:Number,"Mini")|contains(:Number,"Rang")|
						contains(:Number,"Avrg")|contains(:Number,"SDev")|
						contains(:Number,"Cpk")|contains(:Number,"Specification"));

	dt << delete rows;
	
	New column("F1_g");
	for each row(:F1_g = Num( If( Contains( :PF_, "*" ), Substr( :PF_, 2, 6 ), :PF_ ) ) );
	New column("F1 mm");
	for each row(:F1 mm = Num( If( Contains( :PT_, "*" ), Substr( :PT_, 2, 6 ), :PT_ ) ) );
	New column("F2_g");
	for each row(:F2_g = Num( If( Contains( :BF_, "*" ), Substr( :BF_, 2, 6 ), :BF_ ) ) );
	New column("F2 mm");
	for each row(:F2 mm = Num( If( Contains( :BT_, "*" ), Substr( :BT_, 2, 6 ), :BT_ ) ) );
	New column("F3_g");
	for each row(:F3_g = Num( If( Contains( :RPF_, "*" ), Substr( :RPF_, 2, 6 ), :RPF_ ) ) );
	New column("F3 mm");
	for each row(:F3 mm = Num( If( Contains( :RPT_, "*" ), Substr( :RPT_, 2, 6 ), :RPT_ ) ) );
	New column("F4_g");
	for each row(:F4_g = Num( If( Contains( :RBF_, "*" ), Substr( :RBF_, 2, 6 ), :RBF_ ) ) );
	New column("F4 mm");
	for each row(:F4 mm = Num( If( Contains( :RBT_, "*" ), Substr( :RBT_, 2, 6 ), :RBT_ ) ) );
	New column("Cf/Cr_g");
	for each row(:Name("Cf/Cr_g") = Num( If( Contains( :Clickg_, "*" ), Substr( :Clickg_, 2, 6 ), :Clickg_ ) ) );
	New column("Cf/Cr_%");
	for each row(:Name("Cf/Cr_%") = Num( If( Contains( :Click_, "*" ), Substr( :Click_, 2, 6 ), :Click_ ) ) );
	New column("Max");
	for each row(:Max = Num( If( Contains( :TT_, "*" ), Substr( :TT_, 2, 6 ), :TT_ ) ) );
	
	:F1_g << Set display width(60);
	:F1 mm << Set display width(60);
	:F2_g << Set display width(60);
	:F2 mm << Set display width(60);
	:F3_g << Set display width(60);
	:F3 mm << Set display width(60);
	:F4_g << Set display width(60);
	:F4 mm << Set display width(60);
	:Name("Cf/Cr_g") << Set display width(60);
	:Name("Cf/Cr_%") << Set display width(60);
	:Max << Set display width(60);
	
	dt << Select columns("F1_g","F1 mm","F2_g","F2 mm","F3_g","F3 mm","F4_g","F4 mm","Cf/Cr_g","Cf/Cr_%","Max","File Name");
	dt << Invert Column Selection;
	dt << delete columns;
	Script_list = dt << Get Table Script Names;
	dt << Delete Scripts( Script_list );

//===========================================

//新建 9 列存放数据
dt = Current Data Table();
colsnum = 9;
For( i = 1, i <= colsnum, i++,
	New Column( Char( i ), Character, "Nominal",Set Selected )
);

//移动 1-9 列到最前面
dt << Move Selected Columns(
	{:"1"n, :"2"n, :"3"n, :"4"n, :"5"n, :"6"n, :"7"n, :"8"n, :"9"n},
	To First
);

//新建一列数字列，用于存放 PF_Mean
 dt << New Column( "10",Numeric,"Continuous",);
 
//重命名列名称
NewCols = {"Test Date", "Test Time", "Dome Type", "Equipment_Number",
    "Tool","Slide","Block","Cavity","Tester","PF","PT","BF","BT","RPF","RPT",
    "RBF","RBT","Click_g","Click","160T","PFmean"
};
//循环改列名
For( i = 1, i <= N Items( NewCols ), i++,
 Column( dt, i ) << set name( NewCols[i] )
);

//写入大 Dome 测试日期
dt:Test Date << Set Each Value(Test_DateA);
//写入大 Dome 测试时间
dt:Test Time << Set Each Value(Test_TimeA);
//写入大 Dome Type
dt:Dome Type << Set Each Value("21021A");
//写入大 Dome 机台编号
dt:Equipment_Number << Set Each Value(Machine_A);
//写入大 Dome 摸具编号
dt:Tool << Set Each Value(Tool_A);
//写入大 Dome Block 信息 144 行
Block_Area = Repeat( {"A","B","C","D","E","F","G","H"}, 18 );
Block_Area = Sort List(Block_Area);
dt:Block << Set  Values(	Block_Area);
//写入大 Dome CAV 144 行
CAV_Area = Repeat( {"CAV 001","CAV 006","CAV 011","CAV 045","CAV 050","CAV 055","CAV 089",
	"CAV 094","CAV 099","CAV 111","CAV 116","CAV 121","CAV 155","CAV 160","CAV 165",
	"CAV 199","CAV 204","CAV 209"}, 8 );
dt:Cavity << Set  Values(CAV_Area);
//写入测试设备名称
dt:Tester << Set Each Value("SE");
//设置 PF mean 公式
dt:PFmean << Set Formula(
	Round( Col Mean( :PF, :Test Date, :Test Time, :Tool ), 4 )
);

//清除列选择状态
dt << Clear Column Selection();

//运行 A_Dome 图形脚本
A_Dome;

//保存 A_Dome 报表
//Save_A_Dome_Force;

//A_Dome 判断是否超规
A_Dome_Tips;

);

 //==================================================
Save_A_Dome_Force = Expr(
dt = Current Data Table();

If( 
	N Table() == 0, win = New Window( "错误提示",
    <<Modal,
    Text Box( "无数据表！\!n停止保存数据表！" ),
    Button Box( "OK" ),);
	Stop();
	);
	
//A Dome 模号
Tool_A = Tool_BoxA << Get Text();
//保存文件到桌面
 dt << Save("\\192.168.0.245\品保课\A产品数据\成型IPQC数据\Dome IPQC report_暂存\21021_IPQC_Data_JMP\Dome " || Char(Tool_A) || " IPQC force Data "|| Char(Test_DateA)||" "||Substr(Test_TimeA,1,3)||".jmp");
);

 //==================================================

//A_Dome 拉图
A_Dome =  Expr(

//判断是否有表存在，不存在停止运行！
If( 
	N Table() == 0, win = New Window( "错误提示",
    <<Modal,
    Text Box( "未打开数据表！停止\!n生成图形！" ),
    Button Box( "OK" ),);
	Stop();
	);
	
  A_Dome_Graph =  Graph Builder(
	Size( 1100, 626 ),
	Data Table(dt ),
	Variables(
		Y( :PF ),
		Y( :PT ),
		Y( :BF ),
		Y( :BT ),
		Y( :Click ),
		Y( :"160T"n ),
		Y( :RPF ),
		Y( :RBF ),
		Y( :PFmean )
	),
	Elements(
		Position( 1, 1 ),
		Points( Y, Legend( 139 ) ),
		Caption Box( Y, Legend( 111 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 148 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 2 ),
		Points( Y, Legend( 140 ) ),
		Caption Box( Y, Legend( 112 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 149 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 3 ),
		Points( Y, Legend( 141 ) ),
		Caption Box( Y, Legend( 113 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 150 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 4 ),
		Points( Y, Legend( 142 ) ),
		Caption Box( Y, Legend( 114 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 151 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 5 ),
		Points( Y, Legend( 143 ) ),
		Caption Box( Y, Legend( 115 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 152 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 6 ),
		Points( Y, Legend( 144 ) ),
		Caption Box( Y, Legend( 116 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 153 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 7 ),
		Points( Y, Legend( 145 ) ),
		Caption Box( Y, Legend( 117 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 154 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 8 ),
		Points( Y, Legend( 146 ) ),
		Caption Box( Y, Legend( 118 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 155 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 9 ),
		Caption Box( Y, Legend( 129 ), Summary Statistic( "Max" ) ),
		Points( Y, Legend( 147 ) ),
		Formula( Y, Legend( 156 ) ),
		Caption Box( Y, Legend( 157 ), Summary Statistic( "Min" ) )
	),
	
	SendToReport(
		Dispatch(
			{},
			"PF",
			ScaleBox,
			{Min( 51 ), Max( 71 ), Inc( 2 ), Minor Ticks( 0 ),
			Add Ref Line( 53, "Solid", "Medium Dark Blue", "LCL 53", 1 ),
			Add Ref Line( 69, "Solid", "Medium Dark Red", "UCL 69", 1 )}
		),
		Dispatch(
			{},
			"PT",
			ScaleBox,
			{Min( 0.17 ), Max( 0.53 ), Inc( 0.05 ), Minor Ticks( 0 ),
			Add Ref Line( 0.19, "Solid", "Medium Dark Blue", "LCL 0.19", 1 ),
			Add Ref Line( 0.49, "Solid", "Medium Dark Red", "UCL 0.49", 1 )}
		),
		Dispatch(
			{},
			"BF",
			ScaleBox,
			{Min( 17 ), Max( 41 ), Inc( 5 ), Minor Ticks( 1 ),
			Add Ref Line( 19, "Solid", "Medium Dark Blue", "LCL 19", 1 ),
			Add Ref Line( 39, "Solid", "Medium Dark Red", "UCL 39", 1 )}
		),
		Dispatch(
			{},
			"BT",
			ScaleBox,
			{Min( 0.37 ), Max( 0.85 ), Inc( 0.01 ), Minor Ticks( 1 ),
			Add Ref Line( 0.39, "Solid", "Medium Dark Blue", "LCL 0.39", 1 ),
			Add Ref Line( 0.79, "Solid", "Medium Dark Red", "UCL 0.79", 1 )}
		),
		Dispatch(
			{},
			"Click",
			ScaleBox,
			{Min( 43 ), Max( 65 ), Inc( 2 ), Minor Ticks( 1 ),
			Add Ref Line( 45, "Solid", "Medium Dark Blue", "LCL 45", 1 ),
			Add Ref Line( 63, "Solid", "Medium Dark Red", "UCL 63", 1 )}
		),
		Dispatch(
			{},
			"160T",
			ScaleBox,
			{Min( 0.614993281375974 ), Max( 1.1 ), Inc( 0.01 ), Minor Ticks( 0 ),
			Add Ref Line( 0.66, "Solid", "Medium Dark Blue", "LCL 0.66", 1 ),
			Add Ref Line( 1.06, "Solid", "Medium Dark Red", "UCL 1.06", 1 )}
		),
		Dispatch(
			{},
			"RPF",
			ScaleBox,
			{Min( 40.7143502417778 ), Max( 57.8533357351111 ), Inc( 5 ),
			Minor Ticks( 1 ), Add Ref Line(
				41, "Solid", "Medium Dark Blue", "LCL 41", 1
			)}
		),
		Dispatch(
			{},
			"PFmean",
			ScaleBox,
			{Min( 59 ), Max( 65 ), Inc( 0.2 ), Minor Ticks( 1 ),
			Add Ref Line( 60, "Solid", "Medium Dark Blue", "LCL 60", 1 ),
			Add Ref Line( 64, "Solid", "Medium Dark Red", "UCL 64", 1 )}
		),
		Dispatch( {}, "graph title", TextEditBox, {Set Text( "大 Dome" )} )
	)
);
//最大化图形窗口，并设置为顶级窗口。
 A_Dome_Graph << Maximize Window;
 A_Dome_Graph << Bring Window To Front;
 
 );


//小 Dome 生成报表
//导入 B Dome SE 数据
Import_SE_Data_BDome  =  Expr(
	
// A Dome 测试日期
Test_DateB = Test_Date_BoxB << Get Text();
// A Dome 测试时间
Test_TimeB = Test_Time_BoxB << Get Text();
// A Dome 机台编号
Machine_B = Machine_BoxB << Get Text();
//A Dome 模号
Tool_B = Tool_BoxB << Get Text();

preferences(set(excel open method("open all sheets")));
//判断桌面是否有  21021_IPQC_Data  文件
IPQC_Data_Dir = Is Directory("$Desktop\21021_IPQC_Data_source");
//如果没有就创建一个 21021_IPQC_Data  文件夹
if (IPQC_Data_Dir  == 0,
Create Directory("$Desktop\21021_IPQC_Data_source" ));
//设置桌面 JMP 文件夹为默认目录
path = Set Default Directory("$Desktop\21021_IPQC_Data_source");

	dt = Multiple File Import(
			<<Set Folder( path ),
			<<Set Name Filter( "*.xls; " ),
			<<Set Name Enable( 1 ),
			<<Set Size Filter( {2732, 493122521} ),
			<<Set Size Enable( 0 ),
			<<Set Date Filter( {3678190842.473, 3678190842.651} ),
			<<Set Date Enable( 0 ),
			<<Set Add File Name Column( 0 ),
			<<Set Add File Size Column( 0 ),
			<<Set Add File Date Column( 0 ),
			<<Set Import Mode( "CSVData" ),
			<<Set Charset( "最佳推测" ),
			<<Set Stack Mode( "Stack Similar" ),
			<<Set CSV Has Headers( 0 ),
			<<Set CSV Allow Numeric( 1 ),
			<<Set CSV First Header Line( 1 ),
			<<Set CSV Number Of Header Lines( 1 ),
			<<Set CSV First Data Line( 2 ),
			<<Set CSV EOF Comma( 1 ),
			<<Set CSV EOF Tab( 0 ),
			<<Set CSV EOF Space( 0 ),
			<<Set CSV EOF Spaces( 0 ),
			<<Set CSV EOF Other( "" ),
			<<Set CSV EOL CRLF( 1 ),
			<<Set CSV EOL CR( 1 ),
			<<Set CSV EOL LF( 1 ),
			<<Set CSV EOL Semicolon( 0 ),
			<<Set CSV EOL Other( "" ),
			<<Set CSV Quote( "\!"" ),
			<<Set CSV Escape( "" )
		) << Import Data;
	dt << Set name("21021 IPQC Dome Force Data");
//导入后定义当前活动表为 datatable
dt = Current Data Table();
//判断有没有活动表,如果没有停止运行
if (
	Is Empty(dt),
	win = New Window( "错误提示",
    <<Modal,
    Text Box( "桌面  21021_IPQC_Data_source 文件夹\!n为空请检查文件！" ),
    Button Box( "OK" ),);
	Stop();
);

//判断打开的表是否有多个
If( N Table() > 1, win = New Window( "错误提示",
    <<Modal,
    Text Box( "当前有打开的 JMP 数据表\!n请全部关闭后再运行！" ),
    Button Box( "OK" ),);
	Stop(););

	dt = data table("21021 IPQC Dome Force Data.jmp");
		current data table(dt);
		column(1) << set name("Number");
		column(4) << set name("PF_");
		column(5) << set name("PT_");
		column(6) << set name("BF_");
		column(7) << set name("BT_");
		column(8) << set name("RPF_");
		column(9) << set name("RPT_");
		column(10) << set name("RBF_");
		column(11) << set name("RBT_");
		column(12) << set name("Clickg_");
		column(13) << set name("Click_");
		column(14) << set name("Max_");
		column(15) << set name("TT_");

		dt << select where(:Number == ""|contains(:Number,"Product Name")|contains(:Number,"Lot No")|
						contains(:Number,"Operator")|contains(:Number,"Upper")|
						contains(:Number,"Lower")|contains(:Number,"Maxi")|
						contains(:Number,"Mini")|contains(:Number,"Rang")|
						contains(:Number,"Avrg")|contains(:Number,"SDev")|
						contains(:Number,"Cpk")|contains(:Number,"Specification"));

	dt << delete rows;
	
	New column("F1_g");
	for each row(:F1_g = Num( If( Contains( :PF_, "*" ), Substr( :PF_, 2, 6 ), :PF_ ) ) );
	New column("F1 mm");
	for each row(:F1 mm = Num( If( Contains( :PT_, "*" ), Substr( :PT_, 2, 6 ), :PT_ ) ) );
	New column("F2_g");
	for each row(:F2_g = Num( If( Contains( :BF_, "*" ), Substr( :BF_, 2, 6 ), :BF_ ) ) );
	New column("F2 mm");
	for each row(:F2 mm = Num( If( Contains( :BT_, "*" ), Substr( :BT_, 2, 6 ), :BT_ ) ) );
	New column("F3_g");
	for each row(:F3_g = Num( If( Contains( :RPF_, "*" ), Substr( :RPF_, 2, 6 ), :RPF_ ) ) );
	New column("F3 mm");
	for each row(:F3 mm = Num( If( Contains( :RPT_, "*" ), Substr( :RPT_, 2, 6 ), :RPT_ ) ) );
	New column("F4_g");
	for each row(:F4_g = Num( If( Contains( :RBF_, "*" ), Substr( :RBF_, 2, 6 ), :RBF_ ) ) );
	New column("F4 mm");
	for each row(:F4 mm = Num( If( Contains( :RBT_, "*" ), Substr( :RBT_, 2, 6 ), :RBT_ ) ) );
	New column("Cf/Cr_g");
	for each row(:Name("Cf/Cr_g") = Num( If( Contains( :Clickg_, "*" ), Substr( :Clickg_, 2, 6 ), :Clickg_ ) ) );
	New column("Cf/Cr_%");
	for each row(:Name("Cf/Cr_%") = Num( If( Contains( :Click_, "*" ), Substr( :Click_, 2, 6 ), :Click_ ) ) );
	New column("Max");
	for each row(:Max = Num( If( Contains( :TT_, "*" ), Substr( :TT_, 2, 6 ), :TT_ ) ) );
	
	:F1_g << Set display width(60);
	:F1 mm << Set display width(60);
	:F2_g << Set display width(60);
	:F2 mm << Set display width(60);
	:F3_g << Set display width(60);
	:F3 mm << Set display width(60);
	:F4_g << Set display width(60);
	:F4 mm << Set display width(60);
	:Name("Cf/Cr_g") << Set display width(60);
	:Name("Cf/Cr_%") << Set display width(60);
	:Max << Set display width(60);
	
	dt << Select columns("F1_g","F1 mm","F2_g","F2 mm","F3_g","F3 mm","F4_g","F4 mm","Cf/Cr_g","Cf/Cr_%","Max","File Name");
	dt << Invert Column Selection;
	dt << delete columns;
	Script_list = dt << Get Table Script Names;
	dt << Delete Scripts( Script_list );

//===========================================

//新建 9 列存放数据
dt = Current Data Table();
colsnum = 9;
For( i = 1, i <= colsnum, i++,
	New Column( Char( i ), Character, "Nominal",Set Selected )
);

//移动 1-9 列到最前面
dt << Move Selected Columns(
	{:"1"n, :"2"n, :"3"n, :"4"n, :"5"n, :"6"n, :"7"n, :"8"n, :"9"n},
	To First
);

//新建一列数字列，用于存放 PF_Mean
 dt << New Column( "10",Numeric,"Continuous",);
 
//重命名列名称
NewCols = {"Test Date", "Test Time", "Dome Type", "Equipment_Number",
    "Tool","Slide","Block","Cavity","Tester","PF","PT","BF","BT","RPF","RPT",
    "RBF","RBT","Click_g","Click","160T","PFmean"
};
//循环改列名
For( i = 1, i <= N Items( NewCols ), i++,
 Column( dt, i ) << set name( NewCols[i] )
);

//写入小 Dome 测试日期
dt:Test Date << Set Each Value(Test_DateB);
//写入小 Dome 测试时间
dt:Test Time << Set Each Value(Test_TimeB);
//写入小 Dome Type
dt:Dome Type << Set Each Value("21021B");
//写入小 Dome 机台编号
dt:Equipment_Number << Set Each Value(Machine_B);
//写入小 Dome 摸具编号
dt:Tool << Set Each Value(Tool_B);
//写入小 Dome Block 信息 144 行
Block_Brea = Repeat( {"A","B","C","D","E","F","G","H"}, 18 );
Block_Brea = Sort List(Block_Brea);
dt:Block << Set  Values(	Block_Brea);
//写入小 Dome CAV 144 行
CAV_Area = Repeat( {"CAV 001","CAV 008","CAV 014","CAV 088","CAV 095","CAV 101","CAV 175",
	"CAV 181","CAV 188","CAV 189","CAV 196","CAV 202","CAV 276","CAV 283","CAV 289",
	"CAV 363","CAV 370","CAV 376"}, 8 );
dt:Cavity << Set  Values(CAV_Area);
//写入测试设备名称
dt:Tester << Set Each Value("SE");
//设置 PF mean 公式
dt:PFmean << Set Formula(
	Round( Col Mean( :PF, :Test Date, :Test Time, :Tool ), 4 )
);

//清除列选择状态
dt << Clear Column Selection();

//运行 B_Dome 图形脚本
B_Dome;

//保存 B_Dome 报表
//Save_B_Dome_Force;

//判断 B_Dome 是否超规格
B_Dome_Tips;

);

 //==================================================

Save_B_Dome_Force = Expr(
dt = Current Data Table();

If( 
	N Table() == 0, win = New Window( "错误提示",
    <<Modal,
    Text Box( "无数据表！\!n停止保存数据表！" ),
    Button Box( "OK" ),);
	Stop();
	);
	
//B Dome 模号
Tool_B = Tool_BoxB << Get Text();
//保存文件到桌面
 dt << Save("\\192.168.0.245\品保课\A产品数据\成型IPQC数据\Dome IPQC report_暂存\21021_IPQC_Data_JMP\Dome " || Char(Tool_B)  || " IPQC force Data " || Char(Test_DateB) ||" " ||Substr(Test_TimeB,1,3) || ".jmp");
);

//==================================================

//B_Dome 拉图
B_Dome =  Expr(

//判断是否有表存在，不存在停止运行！
If( 
	N Table() == 0, win = New Window( "错误提示",
    <<Modal,
    Text Box( "未打开数据表！停止\!n生成图形！" ),
    Button Box( "OK" ),);
	Stop();
	);
	
  B_Dome_Graph =  Graph Builder(
	Size( 1155, 660 ),
	Variables(
		Y( :PF ),
		Y( :PT ),
		Y( :BF ),
		Y( :BT ),
		Y( :Click ),
		Y( :"160T"n ),
		Y( :RPF ),
		Y( :PFmean )
	),
	Elements(
		Position( 1, 1 ),
		Points( Y, Legend( 139 ) ),
		Caption Box( Y, Legend( 111 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 148 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 2 ),
		Points( Y, Legend( 140 ) ),
		Caption Box( Y, Legend( 112 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 149 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 3 ),
		Points( Y, Legend( 141 ) ),
		Caption Box( Y, Legend( 113 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 150 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 4 ),
		Points( Y, Legend( 142 ) ),
		Caption Box( Y, Legend( 114 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 151 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 5 ),
		Points( Y, Legend( 143 ) ),
		Caption Box( Y, Legend( 115 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 152 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 6 ),
		Points( Y, Legend( 144 ) ),
		Caption Box( Y, Legend( 116 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 153 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 7 ),
		Points( Y, Legend( 145 ) ),
		Caption Box( Y, Legend( 117 ), Summary Statistic( "Max" ) ),
		Caption Box( Y, Legend( 154 ), Summary Statistic( "Min" ) )
	),
	Elements(
		Position( 1, 8 ),
		Caption Box( Y, Legend( 129 ), Summary Statistic( "Max" ) ),
		Points( Y, Legend( 147 ) ),
		Formula( Y, Legend( 155 ) ),
		Caption Box( Y, Legend( 156 ), Summary Statistic( "Min" ) )
	),
	SendToReport(
		Dispatch(
			{},
			"PF",
			ScaleBox,
			{Min( 50.8235294117647 ), Max( 70.8235294117647 ), Inc( 2 ),
			Minor Ticks( 0 ), Add Ref Line(
				54, "Solid", "Medium Dark Blue", "LCL 54", 1
			), Add Ref Line( 70, "Solid", "Medium Dark Red", "UCL 70", 1 )}
		),
		Dispatch(
			{},
			"PT",
			ScaleBox,
			{Min( 0.147647058823529 ), Max( 0.527647058823529 ), Inc( 0.05 ),
			Minor Ticks( 0 ), Add Ref Line(
				0.21, "Solid", "Medium Dark Blue", "LCL 0.21", 1
			), Add Ref Line( 0.51, "Solid", "Medium Dark Red", "UCL 0.51", 1 )}
		),
		Dispatch(
			{},
			"BF",
			ScaleBox,
			{Min( 15.9411764705882 ), Max( 39.9411764705882 ), Inc( 5 ),
			Minor Ticks( 1 ), Add Ref Line(
				19, "Solid", "Medium Dark Blue", "LCL 19", 1
			), Add Ref Line( 39, "Solid", "Medium Dark Red", "UCL 39", 1 )}
		),
		Dispatch(
			{},
			"BT",
			ScaleBox,
			{Min( 0.354705882352941 ), Max( 0.874705882352941 ), Inc( 0.01 ),
			Minor Ticks( 1 ), Add Ref Line(
				0.45, "Solid", "Medium Dark Blue", "LCL 0.45", 1
			), Add Ref Line( 0.85, "Solid", "Medium Dark Red", "UCL 0.85", 1 )}
		),
		Dispatch(
			{},
			"Click",
			ScaleBox,
			{Min( 38.134328358209 ), Max( 63.134328358209 ), Inc( 2 ),
			Minor Ticks( 1 ), Add Ref Line(
				42, "Solid", "Medium Dark Blue", "LCL 42", 1
			), Add Ref Line( 62, "Solid", "Medium Dark Red", "UCL 62", 1 )}
		),
		Dispatch(
			{},
			"160T",
			ScaleBox,
			{Min( 0.723529411764706 ), Max( 1.52352941176471 ), Inc( 0.01 ),
			Minor Ticks( 0 ), Add Ref Line(
				0.9, "Solid", "Medium Dark Blue", "LCL 0.9", 1
			), Add Ref Line( 1.3, "Solid", "Medium Dark Red", "UCL 1.3", 1 )}
		),
		Dispatch(
			{},
			"RPF",
			ScaleBox,
			{Min( 42 ), Max( 57.8533357351111 ), Inc( 5 ), Minor Ticks( 1 ),
			Add Ref Line( 44, "Solid", "Medium Dark Blue", "LCL 44", 1 )}
		),
		Dispatch(
			{},
			"PFmean",
			ScaleBox,
			{Min( 60 ), Max( 67 ), Inc( 0.2 ), Minor Ticks( 1 ),
			Add Ref Line( 61, "Solid", "Medium Dark Blue", "LCL 61", 1 ),
			Add Ref Line( 65, "Solid", "Medium Dark Red", "UCL 65", 1 )}
		),
		Dispatch( {}, "graph title", TextEditBox, {Set Text( "小 Dome" )} )
	)
);


//最大化图形窗口，并设置为顶级窗口。
 B_Dome_Graph << Maximize Window;
 B_Dome_Graph << Bring Window To Front;
 
 );
 
 //引用规格表
Include("./A_21021_Dome_IPQC_SPEC.jsl");

A_Dome_Tips = Expr(

//大 Dome 获取最大值和最小值

L_PF_Max = Col Maximum( :PF );
L_PF_Min = Col Minimum(:PF);

L_PT_Max = Col Maximum( :PT );
L_PT_Min = Col Minimum(:PT);

L_BF_Max = Col Maximum( :BF );
L_BF_Min = Col Minimum(:BF);

L_BT_Max = Col Maximum( :BT );
L_BT_Min = Col Minimum(:BT);

L_CR_Max = Col Maximum( :Click );
L_CR_Min = Col Minimum(:Click);

L_RPF_Min = Col Minimum(:RPF);

L_160T_Max = Col Maximum( :"160T"n );
L_160T_Min = Col Minimum(:"160T"n);

L_PFmean_Max = Col Maximum( :PFmean );
L_PFmean_Min = Col Minimum(:PFmean);

//大 Dome 规格判断

//PF
If(
	L_PF_Max > L_USL_PF,
	L_PF_H = "PF High 最大值：" ||  Char(L_PF_Max),
	L_PF_H = "OK",
);

If(
	L_PF_Min < L_LSL_PF,
	L_PF_L = "PF Low 最小值：" ||  Char(L_PF_Min),
	L_PF_L = "OK",
);

//PT
If(
	L_PT_Max > L_USL_PT,	
	L_PT_H = "PT High 最大值：" ||  Char(L_PT_Max),
	L_PT_H = "OK",
);

If(
	L_PT_Min < L_LSL_PT,
	L_PT_L = "PT Low 最小值：" ||  Char(L_PT_Min),
	L_PT_L = "OK",
);

//BF
If(
	L_BF_Max > L_USL_BF,
    L_BF_H = "BF High 最大值：" ||  Char(L_BF_Max),
	L_BF_H = "OK",
);

If(
	L_BF_Min < L_LSL_BF,
	L_BF_L = "BF Low 最小值：" ||  Char(L_BF_Min),
	L_BF_L = "OK",
);

//BT
If(
	L_BT_Max > L_USL_BT,
    L_BT_H = "BT High 最大值：" ||  Char(L_BT_Max),
    L_BT_H = "OK",
);

If(
	L_BT_Min < L_LSL_BT,
	L_BT_L = "BT Low 最小值：" ||  Char(L_BT_Min),
    L_BT_L = "OK",
);

//CR
If(
	L_CR_Max > L_USL_CR,
    L_CR_H = "CR High 最大值：" ||  Char(L_CR_Max),
    L_CR_H = "OK",
);

If(
	L_CR_Min < L_LSL_CR,
	L_CR_L = "CR Low 最小值：" ||  Char(L_CR_Min),
    L_CR_L = "OK",
);

//RPF
If(
	L_RPF_Min < L_LSL_RPF,
	L_RPF_L = "RPF Low 最小值：" ||  Char(L_RPF_Min),
    L_RPF_L = "OK",
);

//160T
If(
	L_160T_Max > L_USL_160T,
    L_160T_H = "160T High 最大值：" ||  Char(L_160T_Max),
    L_160T_H = "OK",
);

If(
	L_160T_Min < L_LSL_160T,
	L_160T_L = "160T Low 最小值：" ||  Char(L_160T_Min),
    L_160T_L = "OK",
);

//PFmean
If(
	L_PFmean_Max > L_USL_PFmean,
    L_PFmean_H = "PFmean High 最大值：" ||  Char(L_PFmean_Max),
    L_PFmean_H = "OK",
);

If(
	L_PFmean_Min < L_LSL_PFmean,
	L_PFmean_L = "PFmean Low 最小值：" ||  Char(L_PFmean_Min),
    L_PFmean_L = "OK",
);

win = New Window( "重要提醒！",
    <<Modal,
    Text Box( 
		Char(L_PF_H) || "\!N" || Char(L_PF_L) || "\!N" ||
    	Char(L_PT_H) ||  "\!N" || Char(L_PT_L) || "\!N" ||
    	Char(L_BF_H) ||  "\!N" || Char(L_BF_L) || "\!N" ||
    	Char(L_BT_H) ||  "\!N" || Char(L_BT_L) || "\!N" ||
    	Char(L_CR_H) ||  "\!N" || Char(L_CR_L) || "\!N" ||
    	Char(L_RPF_L) || "\!N" ||
    	Char(L_160T_H) ||  "\!N" || Char(L_160T_L) || "\!N" ||
    	Char(L_PFmean_H) ||  "\!N" || Char(L_PFmean_L)
    ),
    Button Box( "确定" ),);

);

//==============================================================

B_Dome_Tips = Expr(

//小 Dome 获取最大值和最小值

S_PF_Max = Col Maximum( :PF );
S_PF_Min = Col Minimum(:PF);

S_PT_Max = Col Maximum( :PT );
S_PT_Min = Col Minimum(:PT);

S_BF_Max = Col Maximum( :BF );
S_BF_Min = Col Minimum(:BF);

S_BT_Max = Col Maximum( :BT );
S_BT_Min = Col Minimum(:BT);

S_CR_Max = Col Maximum( :Click );
S_CR_Min = Col Minimum(:Click);

S_RPF_Min = Col Minimum(:RPF);

S_160T_Max = Col Maximum( :"160T"n );
S_160T_Min = Col Minimum(:"160T"n);

S_PFmean_Max = Col Maximum( :PFmean );
S_PFmean_Min = Col Minimum(:PFmean);

//小 Dome 规格判断


//PF
If(
	S_PF_Max > S_USL_PF,
	S_PF_H = "PF High 最大值：" ||  Char(S_PF_Max),
	S_PF_H = "OK",
);

If(
	S_PF_Min < S_LSL_PF,
	S_PF_L = "PF Low 最小值：" ||  Char(S_PF_Min),
	S_PF_L = "OK",
);

//PT
If(
	S_PT_Max > S_USL_PT,	
	S_PT_H = "PT High 最大值：" ||  Char(S_PT_Max),
	S_PT_H = "OK",
);

If(
	S_PT_Min < S_LSL_PT,
	S_PT_L = "PT Low 最小值：" ||  Char(S_PT_Min),
	S_PT_L = "OK",
);

//BF
If(
	S_BF_Max > S_USL_BF,
    S_BF_H = "BF High 最大值：" ||  Char(S_BF_Max),
	S_BF_H = "OK",
);

If(
	S_BF_Min < S_LSL_BF,
	S_BF_L = "BF Low 最小值：" ||  Char(S_BF_Min),
	S_BF_L = "OK",
);

//BT
If(
	S_BT_Max > S_USL_BT,
    S_BT_H = "BT High 最大值：" ||  Char(S_BT_Max),
    S_BT_H = "OK",
);

If(
	S_BT_Min < S_LSL_BT,
	S_BT_L = "BT Low 最小值：" ||  Char(S_BT_Min),
    S_BT_L = "OK",
);

//CR
If(
	S_CR_Max > S_USL_CR,
    S_CR_H = "CR High 最大值：" ||  Char(S_CR_Max),
    S_CR_H = "OK",
);

If(
	S_CR_Min < S_LSL_CR,
	S_CR_L = "CR Low 最小值：" ||  Char(S_CR_Min),
    S_CR_L = "OK",
);

//RPF
If(
	S_RPF_Min < S_LSL_RPF,
	S_RPF_L = "RPF Low 最小值：" ||  Char(S_RPF_Min),
    S_RPF_L = "OK",
);

//160T
If(
	S_160T_Max > S_USL_160T,
    S_160T_H = "160T High 最大值：" ||  Char(S_160T_Max),
    S_160T_H = "OK",
);

If(
	S_160T_Min < S_LSL_160T,
	S_160T_L = "160T Low 最小值：" ||  Char(S_160T_Min),
    S_160T_L = "OK",
);

//PFmean
If(
	S_PFmean_Max > S_USL_PFmean,
    S_PFmean_H = "PFmean High 最大值：" ||  Char(S_PFmean_Max),
    S_PFmean_H = "OK",
);

If(
	S_PFmean_Min < S_LSL_PFmean,
	S_PFmean_L = "PFmean Low 最小值：" ||  Char(S_PFmean_Min),
    S_PFmean_L = "OK",
);

win = New Window( "提醒",
    <<Modal,
    Text Box( 
		Char(S_PF_H) || "\!N" || Char(S_PF_L) || "\!N" ||
    	Char(S_PT_H) ||  "\!N" || Char(S_PT_L) || "\!N" ||
    	Char(S_BF_H) ||  "\!N" || Char(S_BF_L) || "\!N" ||
    	Char(S_BT_H) ||  "\!N" || Char(S_BT_L) || "\!N" ||
    	Char(S_CR_H) ||  "\!N" || Char(S_CR_L) || "\!N" ||
    	Char(S_RPF_L) || "\!N" ||
    	Char(S_160T_H) ||  "\!N" || Char(S_160T_L) || "\!N" ||
    	Char(S_PFmean_H) ||  "\!N" || Char(S_PFmean_L)
    ),
    Button Box( "确定" ),);


);

 //查看规格表是否引用成功
Show( Spectext );