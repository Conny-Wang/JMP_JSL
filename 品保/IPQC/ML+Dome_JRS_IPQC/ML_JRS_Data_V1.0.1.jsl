//!

// 新增 ML 测试 JRS 脚本 2024/07/13


// 运行脚本前清除所有 JMP 变量名称和值

Clear Globals();
Clear Log();
Clear Symbols();
Delete Globals();
Delete Symbols();


// 引用路径明细
// ML JRS 原始数据存放目录
Dir_Source = "$Desktop/ML_JRS/ML_JRS_Data";
// 保存数据表目录
Dir_Save = "$Desktop/ML_JRS/ML_JRS_Data_JMP";
// 信息对照表路径
Source_Report = "$Desktop/MB+D IPQC report source.jmp";
// 规格表路径
MLSpec = "$Desktop/ML_JRS/ML_JRS_Spec.jmp";
// SN 记录存放
SN_dt = "$Desktop/ML_JRS/SN.jmp";
// 公盘存放文件路径
DT_Save_Path = "//192.168.0.245/品保课/A产品数据/粘贴IPQC数据/MB+D IPQC report_暂存/ML+Dome_JRS_Data_Backup/";

// 判断原始数据文件夹是否存在，不存在就自动创建
If( Is Directory( Dir_Source ) == 0,
	Create Directory( Dir_Source )
);
// 判断保存数据文件夹是否存在，不存在就自动创建
If( Is Directory( Dir_Save ) == 0,
	Create Directory( Dir_Save )
);

// 判断公盘保存数据文件夹是否存在，不存在就自动创建
If( Is Directory( DT_Save_Path ) == 0,
	Create Directory( DT_Save_Path )
);


// 导入文件
mfi = Multiple File Import( <<Set Folder( Dir_Source ), <<Set Charset( "gb2312" ), ) << Import Data();

// 设置当前表为活动表
dt = Current Data Table();

// 判断表是否为空
If( Is Empty( dt ),
	nw = New Window( "警告", <<Modal, Text Box( "桌面 " || Dir_Source || "\!r文件夹没有 JRS 原始数据文件" ), Button Box( "OK" ) );
	Stop();
);

//改表名
dt << Set Name( "ML_JRS_Data" );
//删除脚本列表
Script_List = dt << Get Table Script Names;
dt << Delete Scripts( Script_List );
// JRS 需要保留的列
JRS_Col_Names = {"SN", "Station_ID", "Key_Number", "Key_Name", "Key_Type", "Key_Size", "Dome_Size", "Peak_Force_gf",
"Peak_Travel_mm", "Bottom_Force_gf", "Bottom_Travel_mm", "Click_Ratio_pct", "Travel_160gf_mm"};

dt << Select columns( JRS_Col_Names );
// 反转列并删除多余的数据
dt << Invert Column Selection;
dt << Delete Columns;

// 新建 13 列
For( i = 1, i <= 13, i++,
	New Column( Char( i ), character )
);
// 移动 11 列到最前面
dt << Move Selected Columns( {:"1"n, :"2"n, :"3"n, :"4"n, :"5"n, :"6"n, :"7"n, :"8"n, :"9"n, :"10"n, :"11"n}, To First );

// 重命名列
ML_Col_Names = {"Vendor", "Line", "Customer", "Stage", "Large Tool", "Small Tool", "Assy", "Data Type", "Test Date",
"Test Time", "Force Test Equipment", "SN", "Station_ID", "Key_Number", "Key_Name", "Key_Type", "Key_Size", "Dome_Size", "PF",
"PT", "BF", "BT", "CR", "160T", "PFmean by lot", "lot"};

For( i = 1, i <= N Items( ML_Col_Names ), i++,
	Column( dt, i ) << set name( ML_Col_Names[i] )
);

// 获取文件名

File_Name = Files In Directory( Dir_Source );
File_Name_List = Items( File_Name[1], "-." );
// 判断文件名是否是 8 位分割
If( Length( File_Name_List ) != 8,
	nw = New Window( "警告", <<Modal, Text Box( "原始数据文件名错误，请检查！" ), Button Box( "OK" ) );
	Stop();
);

// 厂商
dt:Vendor << Set Formula( "IRI" );
// 设备名称
dt:Force Test Equipment << Set Formula( "JRS" );
// 客户
dt:Customer << Set Formula( File_Name_List[1] );
// 机种
dt:Assy << Set Formula( Uppercase( File_Name_List[2] ) );
// 线体
dt:Line << Set Formula( Uppercase( File_Name_List[3] ) );
// 阶段
dt:Stage << Set Formula( File_Name_List[4] );
// 巡回状态
dt:Data Type << Set Formula( Uppercase( File_Name_List[5] ) );
// 巡回日期
dt:Test Date << Set Formula( Uppercase( File_Name_List[6] ) );
// 巡回时间
Test_Time_Value = Uppercase( File_Name_List[7] );
// 文件名巡回时间段
Test_Time_List = {"X01", "X02", "X03", "X04", "X05", "X06", "X07", "X08", "X09", "X10", "X11", "X12"};
// 巡回时间段对照表
Test_Time = {"T10:00", "T12:00", "T14:00", "T16:00", "T18:00", "T20:00", "T22:00", "T24:00", "T02:00", "T04:00", "T06:00",
"T08:00"};
// 定位巡回时间段
Test_Time_Num = Contains( Test_Time_List, Test_Time_Value, 1 );
// 写入数据表
dt:Test Time << Set Formula( Test_Time[Test_Time_Num] );

// 设置 PF Mean 值和 Lot
dt:PFmean by lot << Set Formula( Round( Col Mean( :PF, :Assy, :Line, :Test Date, :Test Time, :Dome_Size ), 4 ) );
dt:lot << Set Formula( :Assy || :Line || :Test Date || :Test Time );

// 打开 MB+D IPQC report source 信息对照表
Try(
	dt1 = Open( Source_Report, Invisible ),
	nw = New Window( "警告", <<Modal, Text Box( "桌面 MB+D IPQC report source.jmp \!r 生产信息表打开失败！请检查！" ), Button Box( "OK" ) );
	Stop();
);

// 文件名转大写
Customer_File_Name = Uppercase( File_Name_List[1] );
Assy_File_Name = Uppercase( File_Name_List[2] );
Line_File_Name = Uppercase( File_Name_List[3] );
TestDate_File_Name = Uppercase( File_Name_List[6] );
TeatTime_File_Name = Uppercase( Test_Time[Test_Time_Num] );

// 查找对应巡回的模号行数
Info_Row = dt1 << Get Rows Where(
	:Assy == Assy_File_Name & :Line No. == Line_File_Name & :Test Date == TestDate_File_Name & :Test Time == TeatTime_File_Name
);

// 判断是否查找到对应的模号
Try(
	Info_Row[1],
	nw = New Window( "警告", <<Modal, Text Box( "生产信息表未查到对应的模号\!r请检查信息是否有误！" ), Button Box( "OK" ) );
	Try( Close( dt1, NoSave ) );
	Stop();
);


// 大 Dome 信息写入
Large_Tool = dt1:Large Tool[Info_Row][1];
dt:Large Tool << Set Formula( Large_Tool );
// 小 Dome 信息写入
Small_Tool = dt1:Small Tool[Info_Row][1];
dt:Small Tool << Set Formula( Small_Tool );

// 关闭 MB+D IPQC report source 信息对照表
Try( Close( dt1, NoSave ) );

// 删除表公式
For( i = 1, i <= 11, i++,
	Column( dt, ML_Col_Names[i] ) << Delete Formula
);

// 设置图形
Force = Expr(
	dt << Graph Builder(
		Size( 1350, 650 ),
		Show Control Panel( 0 ),
		Variables( X( :Key_Number ), Y( :PF ), Y( :BF ), Y( :CR ), Overlay( :Dome_Size ) ),
		Elements(
			Position( 1, 1 ),
			Points( X, Y, Legend( 27 ) ),
			Caption Box( X, Y, Legend( 32 ), Summary Statistic( "Max" ) ),
			Caption Box( X, Y, Legend( 35 ), Summary Statistic( "Min" ) )
		),
		Elements(
			Position( 1, 2 ),
			Points( X, Y, Legend( 29 ) ),
			Caption Box( X, Y, Legend( 33 ), Summary Statistic( "Max" ) ),
			Caption Box( X, Y, Legend( 36 ), Summary Statistic( "Min" ) )
		),
		Elements(
			Position( 1, 3 ),
			Points( X, Y, Legend( 31 ) ),
			Caption Box( X, Y, Legend( 34 ), Summary Statistic( "Max" ) ),
			Caption Box( X, Y, Legend( 37 ), Summary Statistic( "Min" ) )
		),
		SendToReport(
			Dispatch(
				{},
				"PF",
				ScaleBox,
				{Min( 48 ), Max( 75 ), Inc( 5 ), Minor Ticks( 1 ), Add Ref Line( 51, "Dotted", "Blue", "Large LSL 51", 1 ),
				Add Ref Line( 73, "Dotted", "Blue", "Large USL 73", 1 ), Add Ref Line( 50, "Dotted", "Red", "Small LSL 50", 1 ),
				Add Ref Line( 72, "Dotted", "Red", "Small USL 72", 1 ), Label Row( Set Font Size( 9 ) )}
			),
			Dispatch(
				{},
				"BF",
				ScaleBox,
				{Min( 14 ), Max( 44 ), Inc( 5 ), Minor Ticks( 1 ), Add Ref Line(
					15.5, "Dotted", "Blue", "Large/Small LSL 15.5", 1
				), Add Ref Line( 42.5, "Dotted", "Red", "Large/Small USL 42.5", 1 ), Label Row( Set Font Size( 9 ) )}
			),
			Dispatch(
				{},
				"CR",
				ScaleBox,
				{Min( 40 ), Max( 65 ), Inc( 5 ), Add Ref Line( 44, "Dotted", "Blue", "Large LSL 44", 1 ),
				Add Ref Line( 64, "Dotted", "Blue", "Large USL 64", 1 ), Add Ref Line( 42, "Dotted", "Red", "Small LSL 42", 1 ),
				Add Ref Line( 62, "Dotted", "Red", "Small USL 62", 1 ), Label Row( Set Font Size( 9 ) )}
			),
			Dispatch( {}, "graph title", TextEditBox, {Set Text( "Force Distribution" )} )
		)
	);

);

Travel = Expr(
	dt << Graph Builder(
		Size( 1345, 650 ),
		Show Control Panel( 0 ),
		Variables( X( :Key_Number ), Y( :PT ), Y( :BT ), Y( :"160T"n ), Overlay( :Dome_Size ) ),
		Elements(
			Position( 1, 1 ),
			Points( X, Y, Legend( 20 ) ),
			Caption Box( X, Y, Legend( 29 ), Summary Statistic( "Max" ) ),
			Caption Box( X, Y, Legend( 32 ), Summary Statistic( "Min" ) )
		),
		Elements(
			Position( 1, 2 ),
			Points( X, Y, Legend( 22 ) ),
			Caption Box( X, Y, Legend( 30 ), Summary Statistic( "Max" ) ),
			Caption Box( X, Y, Legend( 33 ), Summary Statistic( "Min" ) )
		),
		Elements(
			Position( 1, 3 ),
			Points( X, Y, Legend( 24 ) ),
			Caption Box( X, Y, Legend( 31 ), Summary Statistic( "Max" ) ),
			Caption Box( X, Y, Legend( 34 ), Summary Statistic( "Min" ) )
		),
		SendToReport(
			Dispatch(
				{},
				"PT",
				ScaleBox,
				{Min( 0.17 ), Max( 0.53 ), Inc( 0.05 ), Minor Ticks( 4 ), Add Ref Line(
					0.19, "Dotted", "Blue", "Large LSL 0.19", 1
				), Add Ref Line( 0.49, "Dotted", "Blue", "Large USL 0.49", 1 ), Add Ref Line(
					0.21, "Dotted", "Red", "Small LSL 0.21", 1
				), Add Ref Line( 0.51, "Dotted", "Red", "Small USL 0.51", 1 ), Label Row( Set Font Size( 9 ) )}
			),
			Dispatch(
				{},
				"BT",
				ScaleBox,
				{Min( 0.35 ), Max( 0.87 ), Inc( 0.1 ), Minor Ticks( 4 ), Add Ref Line(
					0.39, "Dotted", "Blue", "Large LSL 0.39", 1
				), Add Ref Line( 0.79, "Dotted", "Blue", "Large USL 0.79", 1 ), Add Ref Line(
					0.45, "Dotted", "Red", "Small LSL 0.45", 1
				), Add Ref Line( 0.85, "Dotted", "Red", "Small USL 0.85", 1 ), Label Row( Set Font Size( 9 ) )}
			),
			Dispatch(
				{},
				"160T",
				ScaleBox,
				{Min( 0.62 ), Max( 1.45 ), Inc( 0.2 ), Minor Ticks( 3 ), Add Ref Line(
					0.66, "Dotted", "Blue", "Large LSL 0.66", 1
				), Add Ref Line( 1.06, "Dotted", "Blue", "Large USL 1.06", 1 ), Add Ref Line(
					0.9, "Dotted", "Red", "Small LSL 0.9", 1
				), Add Ref Line( 1.3, "Dotted", "Red", "Small USL 1.3", 1 ), Label Row( Set Font Size( 9 ) )}
			),
			Dispatch( {}, "graph title", TextEditBox, {Set Text( "Travel Distribution" )} )
		)
	)
);

Force;
Travel;

// 判断数据

// 打开规格表
Try(
	dt2 = Open( MLSpec, Invisible ),
	nw = New Window( "警告", <<Modal, Text Box( "桌面 " || MLSpec || "\!r 规格表打开失败！请检查！" ), Button Box( "OK" ) );
	Stop();
);


SpecRows = dt2 << get rows where(
	:Customer == Customer_File_Name & :Assy == Assy_File_Name//:Dome_Size == "Large" 		
);

// 测试项目
TestItems = {};
For( i = 1, i <= N Items( SpecRows ), i++,
	Insert Into( TestItems, dt2:Test_Items[SpecRows][i] || "_" || dt2:Dome_Size[SpecRows][i] )
);
Print( TestItems );

// 获取 LSL
MLSpec_LSL = dt2[SpecRows, 5];
// 获取 USL	
MLSpec_USL = dt2[SpecRows, 6];
// 获取后关闭规格表
Try( Close( dt2, NoSave ) );

// 测试列名
Test_List = {"PF", "PT", "BF", "BT", "CR", "160T", "PFmean by lot"};

test_value_Max = [];
test_value_Min = [];

For( i = 1, i <= N Items( Test_List ), i++,
	Summarize( DomeSize = By( dt:Dome_Size ), max_values = Max( Column( dt, Test_List[i] ) ) );
	Summarize( DomeSize = By( dt:Dome_Size ), min_values = Min( Column( dt, Test_List[i] ) ) );
	test_value_Max = test_value_Max || Eval List( Round( max_values, 4 ) );
	test_value_Min = test_value_Min || Eval List( Round( min_values, 4 ) );
);

Print( test_value_Max, test_value_Min ); // 测试值
// 规格
Transpose( MLSpec_USL );
Transpose( MLSpec_LSL );

// 测试结果
Test_Result_Max = Round( (test_value_Max[1, 0] || test_value_Max[2, 0]), 4 );
Test_Result_Min = Round( (test_value_Min[1, 0] || test_value_Max[2, 0]), 4 );
// 判断大于规格的值

Out_Spec_Max_Index = Loc( Test_Result_Max > Transpose( MLSpec_USL ) );
Out_Spec_Min_Index = Loc( Test_Result_Min < Transpose( MLSpec_LSL ) );

Try( Test_Items_Max_List = TestItems[Out_Spec_Max_Index], Test_Items_Max_List = [] );
Try( Test_Items_Min_List = TestItems[Out_Spec_Min_Index], Test_Items_Min_List = [] );

Out_Spec_Max_Value = As List( Test_Result_Max[Out_Spec_Max_Index] );
Out_Spec_Min_Value = As List( Test_Result_Min[Out_Spec_Min_Index] );

Result_List = {};

// 循环拼接
For( i = 1, i <= N Items( Test_Items_Max_List ), i++,
	Try( Out_Spec_Max_Value[1], Break() );
	Insert Into( Result_List, "超上限 " || (Test_Items_Max_List[i] || ": " || Char( Out_Spec_Max_Value[i] )) );
);

For( i = 1, i <= N Items( Test_Items_Min_List ), i++,
	Try( Out_Spec_Min_Value[1], Break() );
	Insert Into( Result_List, "超下限 " || (Test_Items_Min_List[i] || ": " || Char( Out_Spec_Min_Value[i] )) );
);

Print( Result_List );


If( N Items( Result_List ) == 0,
	Result_Items = "无超规项目！";
	NW = New Window( "汇总", T_Box = Text Box( Result_Items ) );
	T_Box << Set Font Style( "Bold" );
	T_Box << Set Font Size( 11 );
	T_Box << Set Font Name( "幼圆" );
	T_Box << Background Color( "Green" );
, 
	
	Result_Items = "";
	For( i = 1, i <= N Items( Result_List ), i++,
		Result_Items = Result_Items || Result_List[i] || "\!N"
	);
	NW = New Window( "汇总", T_Box = Text Box( Result_Items ) );
	// 设置字体加粗 字号 字体 颜色
	T_Box << Set Font Style( "Bold" );
	T_Box << Set Font Size( 11 );
	T_Box << Set Font Name( "幼圆" );
	//T_Box << Text Color( "Red" );
	T_Box << Background Color( "Red" );
	//NW  <<  Set Window Size( 400, 500 ) << Move Window( 800, 300 );
);

// 核对 SN 是否重复
// 判断 桌面 ML_JRS/SN.jmp 文件是否存在
// 不存在就新建一个表


If( File Exists( SN_dt ) == 0,
	dt3 = New Table( "SN.jmp", New Column( "SN", Character ), New Column( "lot", Character ) );
	dt3 << Save As( SN_dt );
,
	Try( dt3 = Open( SN_dt ) )
);

// 获取当前测试的 SN 并去重
Test_SN = Associative Array( dt:SN );
lot_Num = Associative Array( dt:lot );
// 获取 SN 和 Lot 号
SN_Value = Test_SN << Get Keys;
Lot_Value = lot_Num << Get Keys;
// 重复 lot 号和 SN 数量一致
Lot_Value = Repeat( Lot_Value, N Items( Test_SN ) );
// 写入数据表
For Each( {value, index}, SN_Value, dt3 << Add Rows( {SN = SN_Value[index], lot = Lot_Value[index]} ) );
// 检查 SN 数量
SN_Num_Add = N Rows( dt3 );
// 去重 SN 数量
dt3 << Select Duplicate Rows( Match( :SN ) ) << Delete Rows;
// 再检查 SN 数量
SN_Num_After = N Rows( dt3 );
// 如果添加数量 - 去重后的数量大于 0 说明有重复的 SN 
If( SN_Num_Add - SN_Num_After > 0,
	nw = New Window( "警告", <<Modal, Text Box( "当前巡回的 SN 和之前测试的 SN \!r有重复！请检查！" ), Button Box( "OK" ) );
	Close( dt3, No Save );
	Stop();
);

// 保存 SN 表
Close( dt3, Save );

// 保存数据到数据表
// 获取 IPQC 文件名
IPQC_File_Name = Files In Directory( Dir_Save );

If( N Items( IPQC_File_Name ) == 1, 
	// 获取旧文件名
	Test_Date_Old = Items( IPQC_File_Name[1], ".-" );
	
	If( N Items( Test_Date_Old ) == 2,
		Test_Date_Old = Right( Test_Date_Old[1], 7 ),
		Test_Date_Old = Test_Date_Old[2]
	);

	dt4 = Open( Dir_Save || "/" || IPQC_File_Name[1] );
	dt4 << Concatenate( dt, Append to first table );
	dt4 << Save As( Dir_Save || "/IRI ML Dome Force JRS IPQC Data " || Test_Date_Old || "-" || TestDate_File_Name || ".jmp" );
	Try(dt << Save As( DT_Save_Path || "IRI ML Dome Force JRS IPQC Data " || TestDate_File_Name || " " || Char( Today() ) || ".jmp" ));
	// 删除旧文件
	Delete File( Dir_Save || "/" || IPQC_File_Name[1] );
,
	dt << Save As( Dir_Save || "/IRI ML Dome Force JRS IPQC Data " || TestDate_File_Name || ".jmp" );
	Try(dt << Save As( DT_Save_Path || "IRI ML Dome Force JRS IPQC Data " || TestDate_File_Name || " " || Char( Today() ) || ".jmp" ));
);
