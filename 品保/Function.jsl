//



//================================================================

// 2024/11/12 新增删除文件函数
// 引入自定义函数库
// Include("./Function.jsl");

//================================================================

// 测试 nwfunc 函数
// nwfunc("提示信息！");

// 创建一个警告窗体函数用来调用
nwfunc = Function({tips},
	New Window("警告",
		<<Modal,
		Text Box(tips),
		Button Box( "OK" ),
	)
);


//================================================================


// 测试 files_convert_suffix 函数
// files_convert_suffix("./OQC_Data_JMP/","csv");

// 创建一个函数用于重命名文件后缀
files_convert_suffix= Function( {files_path,suffix = "."}, 
	
	
	file_name = Files In Directory( files_path, recursive( 1 ) );
	If( file_name == {},
		NwFunc( "文件夹为空，请检查！" );
		Stop();
	);
	
	/*filelist = {};
	// 获取文件名后缀
	For( i = 1, i <= N Items( filenames ), i++,
		Insert Into( filelist, Item( 2, file_name[i], "." ) )
	);
	// 后缀去重
	filelist = Associative Array( filelist ) << get keys;
	// 判断后缀名是否为 xls
	If( N Items( filelist ) > 1 | filelist[1] != "xls",
		NwFunc( "文件格式不一致，只支持 xls" );
		Stop();
	);*/

	// 重命名为 xlsx 格式
	For Each( {value}, file_name, Rename File( files_path || value, Item( 1, value, "." ) || "." || suffix ) );
	
);


//================================================================

// 测试 mfifunc 函数
// dt = Try( mfifunc( "C:\Users\conny\Desktop\SE_Data", 0 , "*.*" ) << Import Data(), Throw( "参数使用错误" ) );

// 导入文件
mfifunc = Function({folder_name,addfilename = 0,filter_file = "*.*"},
	mfi = Multiple File Import();
	mfi << Set Folder( folder_name );
	mfi << Set Name Filter( filter_file );
	mfi << Set Name Enable( 1 );
	mfi <<Set Add File Name Column( addfilename );
	mfi <<Set Charset( "gb2312" );
);


//================================================================

// 测试 zipFolder 函数
/* folder = "C:\Users\conny\Desktop\123pan\"; // 需要压缩的文件夹
 zipfile = folder || "zipfile.zip"; // 压缩后文件存放路径和名称
 zipFolder(folder,zipfile);*/

// 压缩文件为 zip 格式
zipFolder = Function( {folderToZip, zipFileLoc, overwriteFile = 1, recursive = 1},
	{Default Local}, 
	
	// Convert the filepath to the OS and add a trailing slash if one is missing
	If( Host is( "Windows" ),
		folderToZip = Convert File Path( folderToZip, "Windows" );
		zipFileLoc = Convert File Path( zipFileLoc, "Windows" );
		If( Substr( folderToZip, -1 ) != "\",
			folderToZip = Concat( folderToZip, "\" )
		);
	,
		folderToZip = Convert File Path( folderToZip, "posix" );
		zipFileLoc = Convert File Path( zipFileLoc, "posix" );
		If( Substr( folderToZip, -1 ) != "/",
			folderToZip = Concat( folderToZip, "/" )
		);
	);
	
	// Check to see if the file exst
	If( File Exists( zipFileLoc ),
		
		Match( overwriteFile,
			0, // if we should not overwrite, write to the log and return 0
				Write( "\!NFile already exists" );
				Return( 0 );
		,
			1, // else just delete the existing file
				Delete File( zipFileLoc ),
		);
	);
	
	// create the zipfile and ZipArchive object (za)
	za = Open( zipFileLoc, zip );
	
	// get our list of files to compress, based on recursive setting
	If( recursive == 1,
		dirlist = Files In Directory( folderToZip, "recursive" ),
		dirlist = Files In Directory( folderToZip )
	);	
	
	// loop through each file
	For( iFile = 1, iFile <= N Items( dirlist ), iFile++, 
		
		// read in the uncompressed file as a blob
		tmpBlob = Load Text File( folderToZip || dirlist[iFile], blob );
		
		// write compressed file to the ZipArchive object
		za << Write( dirlist[iFile], tmpBlob );
	);
	
	Return( 1 );
);


//================================================================

// 时间戳

ymdinfo = Expr(
	Format( Today(), "Format Pattern", "<YY><MM><DD> <hh24><mm><ss>" )
);
 
 

 
//================================================================

// 删除文件夹文

// 测试
/*filepath = "C:\Users\conny\Desktop\OQC_Data_JMP\";
deletefiles(filepath);*/

deletefiles = Function( {filepath},

	filelist = Files In Directory( filepath, recursive( 1 ) );
	If( filelist == {},
		NwFunc( "文件夹为空，请检查！" );
		Stop();
	);
	
	For Each( {value}, filelist, Delete File( filepath || value ) )
	
);

